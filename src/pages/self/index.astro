---
import 'bootstrap/dist/css/bootstrap.css';
import 'mdb-ui-kit/css/mdb.min.css'
import 'font-awesome/css/font-awesome.min.css'
import Layout from '../../layouts/Layout.astro'
---

<Layout title="Self Practice">
 

 <!---welcome--->
<div id="welcome">
    <div class="container d-flex justify-content-center align-items-center" style="min-height: 100vh;">
    <div class="card shadow" style="width: 500px;">
        <div class="card-header"><h3 class="text-dark text-center">Multi Level Speaking</h3></div>
        <div class="card-body">
         <h5 class="text-center">Welcome to Speaking Exam!</h5>
         <p>Enter your own questions to practice</p>
         <div class="my-1">
         <label class="fw-bold my-2">Choose Time</label>
         <select id="t"  class="form-control" onchange="getComboA(this)">
	     <option value="0">Choose time</option>
             <option value="30">30 seconds</option>
             <option value="60">1 minute</option>
             <option value="120">2 minutes</option>
         </select>
         </div>
         <div class="my-1">
         <label class="fw-bold my-2">Question 1</label>
         <input id="q1" type="text" class="form-control" name="" placeholder="Enter question here">
         </div>
         <div class="my-1">
         <label class="fw-bold my-2">Question 2</label>
         <input id="q2" type="text" class="form-control" name="" placeholder="Enter question here">
         </div>
         <div class="my-1">
         <label class="fw-bold my-2">Question 3</label>
         <input id="q3" type="text" class="form-control" name="" placeholder="Enter question here">
         </div>
         
         
           <center><button id="startbtn" onclick="step0()" class="btn btn-primary px-5 py-2" style="font-size: 17px;">Start</button></center>
        </div>
    </div>
</div>
</div>

<!----welcome ends-->

<div id="quizBar" class="hidden">
<div class="navbar navbar-expand-lg navbar-light bg-primary shadow">
    <div class="container-fluid">
        <a class="navbar-brand text-light" href="#">Multi Level Speaking</a>
        <div class="timer-bar text-white" id="full-screen" onclick="toggleFullScreen()"><i class="fa fa-expand"></i></div>
        </div>
</div> 

 <section class="container my-3 pt-2 shadow-sm border-1" style="border: 1px solid lightgrey; border-radius: 5px;">
     
 <div class="row">
   <div class="col-md-5 py-3">
     <div class="card">
       <div class="card-body">
         <div class="header-question d-flex justify-content-between align-items-center">
           <span class="badge rounded-pill text-light bg-primary border-0 px-5 py-2">Question# <span id="que-id"></span></span>
           <div>
           <i class="fa fa-volume-up text-primary mx-1"></i><input class="text-dark" type="range" id="audio_volume" min="0" max="1" step="0.01" name=""></div>
         </div>
         <hr>
         <div class=" quiz-container mt-3 d-flex justify-content-center align-items-center">
           <button class="btn btn-primary px-3 py-1 mx-3" onclick="sizeDown()">A-</button>
            <button class="btn btn-primary px-3 py-1 mx-3" onclick="sizeUp()">A+</button>
         </div>
         <hr>
         <div id="question-bar">
         </div>
         <audio src="/static/audios/test1/beep.mp3" id="beep"></audio>
       </div>
     </div>
   </div>
   <!----Right side--->
   <div class="col-md-7 py-3">
     <div class="card" id="card">
       <div class="card-body">
         <div class="header-question d-flex justify-content-around align-items-center">
           <button class="btn btn-primary w-100 fw-bold py-1">
            <i class="fa fa-clock-o text-light" style="font-size:23px"></i><span class="text-light px-2" id="timer" style="width:50px; font-size: 23px;"></span>
           </button>
         </div>
         <div class="recorder hidden">
        <center><div id="rec-icon" class="microphone-wave"></div>
        <p id="rec-text" class="text-center">Recording...</p></center>
        </div>
         <div id="downloadContainer" class="d-flex flex-column">
            <audio src="" id="audio-playback" class="my-2" controls></audio>
            <a id="home" class="text-lg my-2 btn btn-primary py-2 text-white my-3" href="/" style="display:none">Back to Home</a>
         </div>
         
       </div>
     </div>
   </div>
 </div>
 </section>



<!------->
                     
                
</div>


</Layout>
<style>
.microphone-wave {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background-color: #e60606;
  position: relative;
  animation: blink-mic 1s linear infinite;
  margin-top: 30px;
}

@keyframes blink-mic {
  0% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

.text-to-speech{
  text-align:center
}


</style>
<script src="https://code.responsivevoice.org/responsivevoice.js" is:inline></script>
<script is:inline>

const part1=document.getElementById("quizBar");
const welcome=document.getElementById("welcome")
const que=document.getElementById("question-bar");
const beep=document.getElementById("beep");
const timer=document.getElementById("timer");
const que_id=document.getElementById("que-id");
const q1=document.getElementById("q1")
const q2=document.getElementById("q2")
const q3=document.getElementById("q3")
let t;
const preview =document.getElementById("audio-playback")
const blink = document.querySelector(".recorder")
let mediaRecorder;
let chunks = [];
part1.style.display="none";
preview .style.display="none";
//Recorder

function startRecording() {
        navigator.mediaDevices.getUserMedia({ audio: true })
          .then(function (stream) {
            mediaRecorder = new MediaRecorder(stream);
            mediaRecorder.start();
	   startTime = new Date().getTime();
            mediaRecorder.addEventListener("dataavailable", function (event) {
              chunks.push(event.data);
            });
          })
          .catch(function (err) {
            console.log("Error: " + err);
          });
      }

      function stopRecording() {
        mediaRecorder.stop();

        mediaRecorder.addEventListener("stop", function () {
          const blob = new Blob(chunks, { type: "audio/ogg; codecs=opus" });
          const audioUrl = URL.createObjectURL(blob);
	  const currentTime = new Date().getTime();
          const duration = (currentTime - startTime) / 1000;
          preview.src = audioUrl;
          chunks = [];
         
        });
      }


  
//Scale UpandDown
var TextSize=document.getElementById("question-bar");
 function sizeUp(){
    var style = window.getComputedStyle(TextSize, null).getPropertyValue('font-size');
    var fontSize = parseFloat(style);
    TextSize.style.fontSize=(fontSize+1)+'px'
 }

 function sizeDown(){
    var style = window.getComputedStyle(TextSize, null).getPropertyValue('font-size');
    var fontSize = parseFloat(style);
    TextSize.style.fontSize=(fontSize-1)+'px'
 }

 //Fullscreen
 function toggleFullScreen() {
	if (!document.fullscreenElement) {
	  document.documentElement.requestFullscreen();
	  document.getElementById("full-screen").innerHTML=`<i class="fa fa-compress"></i>`
	} else if (document.exitFullscreen) {
	  document.exitFullscreen();
	 document.getElementById("full-screen").innerHTML=`<i class="fa fa-expand"></i>`
	}
  }
  
function getComboA(selectObject) {
   t = selectObject.value;  
  console.log(t);
}


//Step1
function step0() {
	if(q1.value=="" || q2.value==""|| q3.value==""){
		alert("Enter questions, please!")
		return false
	}
	else{
	startRecording()
	welcome.style.display="none";
	part1.style.display="block"
	que.innerHTML=q1.value
	que_id.innerHTML=1
	// Create a new ResponsiveVoice speech utterance
 	const text = q1.value;
	const voiceName = "US English Female";
	responsiveVoice.speak(text, voiceName, { onend: startCountdown });

	
}
	// Define a function to start the 5-second countdown
function startCountdown() {
	let count = 5;
	timer.innerHTML += `${count} seconds`;
	const interval = setInterval(() => {
	  count--;
	  timer.innerHTML = `${count} seconds`;
	  if (count <= 0) {
		beep.play();
		clearInterval(interval);
		start30SecondCountdown();
                blink.classList.remove("hidden")
	  }
	}, 1000);
  }

	// Define a function to start the 30-second countdown
	function start30SecondCountdown() {
		let count = t;
		timer.innerHTML = ` ${count}  LEFT`;
		const interval = setInterval(() => {
		  count--;
		  timer.innerHTML = `${count} LEFT`;
		  if (count <= 0) {
			timer.innerHTML="";
			clearInterval(interval);
			step1();
                        blink.classList.add("hidden")
	
		  }
		}, 1000);
	  }
	
}

//Step1 fun

function step1(){
	que.innerHTML=q2.value;
	que_id.innerHTML=2
	// Create a new ResponsiveVoice speech utterance
 	const text = q2.value;
	const voiceName = "US English Female";
	responsiveVoice.speak(text, voiceName, { onend: startCountdown });

	//countdown 5 sec
	function startCountdown() {
		let count = 5;
		timer.innerHTML += `${count} seconds`;
		const interval = setInterval(() => {
		  count--;
		  timer.innerHTML = `${count} seconds`;
		  if (count <= 0) {
			beep.play();
			clearInterval(interval);
			start30SecondCountdown();
			blink.classList.remove("hidden")
		  }
		}, 1000);
	  }
	
		// Define a function to start the 30-second countdown
		function start30SecondCountdown() {
			let count = t;
			timer.innerHTML = ` ${count} LEFT`;
			const interval = setInterval(() => {
			  count--;
			  timer.innerHTML = `${count} LEFT`;
			  if (count <= 0) {
				timer.innerHTML="";
				clearInterval(interval);
				step2();
                                blink.classList.add("hidden")
		
			  }
			}, 1000);
		  }
}


//step2

function step2(){
	que.innerHTML=q3.value;
	que_id.innerHTML=3
	// Create a new ResponsiveVoice speech utterance
 	const text = q3.value;
	const voiceName = "US English Female";
	responsiveVoice.speak(text, voiceName, { onend: startCountdown });

	//countdown 5 sec
	function startCountdown() {
		let count = 5;
		timer.innerHTML += `${count} seconds`;
		const interval = setInterval(() => {
		  count--;
		  timer.innerHTML = `${count} seconds`;
		  if (count <= 0) {
			beep.play();
			clearInterval(interval);
			start30SecondCountdown();
			blink.classList.remove("hidden")
		  }
		}, 1000);
	  }
	
		// Define a function to start the 30-second countdown
		function start30SecondCountdown() {
			let count = t;
			timer.innerHTML = ` ${count} LEFT`;
			const interval = setInterval(() => {
			  count--;
			  timer.innerHTML = `${count} LEFT`;
			  if (count <= 0) {
				timer.innerHTML="";
				clearInterval(interval);
 				blink.classList.add("hidden")
				examEnd();
				
		
			  }
			}, 1000);
		  }
}

/*

function step3(){
	que.innerHTML=q4.value;
	que_id.innerHTML=4
	audio4.play();
	audio4.addEventListener("ended", startCountdown);
	//countdown 5 sec
	function startCountdown() {
		let count = 5;
		timer.innerHTML += `${count} seconds`;
		const interval = setInterval(() => {
		  count--;
		  timer.innerHTML = `${count} seconds`;
		  if (count <= 0) {
			beep.play();
			clearInterval(interval);
			start30SecondCountdown();
		  }
		}, 1000);
	  }
	
		// Define a function to start the 30-second countdown
		function start30SecondCountdown() {
			let count = 30;
			timer.innerHTML = ` ${count} sec LEFT`;
			const interval = setInterval(() => {
			  count--;
			  timer.innerHTML = `${count} sec LEFT`;
			  if (count <= 0) {
				timer.innerHTML="";
				clearInterval(interval);
				step4();
		
			  }
			}, 1000);
		  }
}


//step4

function step4(){
	que.innerHTML=q5.value
	que_id.innerHTML=5
	audio5.play();
	audio5.addEventListener("ended", startCountdown);
	//countdown 5 sec
	function startCountdown() {
		let count = 5;
		timer.innerHTML += `${count} seconds`;
		const interval = setInterval(() => {
		  count--;
		  timer.innerHTML = `${count} seconds`;
		  if (count <= 0) {
			beep.play();
			clearInterval(interval);
			start30SecondCountdown();
		  }
		}, 1000);
	  }
	
		// Define a function to start the 30-second countdown
		function start30SecondCountdown() {
			let count = 30;
			timer.innerHTML = ` ${count} sec LEFT`;
			const interval = setInterval(() => {
			  count--;
			  timer.innerHTML = `${count} sec LEFT`;
			  if (count <= 0) {
				timer.innerHTML="";
				clearInterval(interval);
				step5();
		
			  }
			}, 1000);
		  }
}


//step5

function step5(){
	que.innerHTML=q6.value;
	que_id.innerHTML=6
	audio6.play();
	audio6.addEventListener("ended", startCountdown);
	//countdown 5 sec
	function startCountdown() {
		let count = 5;
		timer.innerHTML += `${count} seconds`;
		const interval = setInterval(() => {
		  count--;
		  timer.innerHTML = `${count} seconds`;
		  if (count <= 0) {
			beep.play();
			clearInterval(interval);
			start30SecondCountdown();
		  }
		}, 1000);
	  }
	
		// Define a function to start the 30-second countdown
		function start30SecondCountdown() {
			let count = 30;
			timer.innerHTML = ` ${count} sec LEFT`;
			const interval = setInterval(() => {
			  count--;
			  timer.innerHTML = `${count} sec LEFT`;
			  if (count <= 0) {
				timer.innerHTML="";
				clearInterval(interval);
				examEnd();
		
			  }
			}, 1000);
		  }
}

*/


function examEnd(){
	que.innerHTML='';
	que_id.innerHTML='';
	
	// Create a new Text-to-Speech object
  
  const text = "This is the end of Speaking Test";
	const voiceName = "US English Female";
	responsiveVoice.speak(text, voiceName, { onend: showResult });


  function showResult(){
		stopRecording();
                preview .style.display="block";
		document.getElementById("home").style.display="block"

}
}



</script>
