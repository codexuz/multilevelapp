<div class="bg-white dark:bg-gray-700" style="min-height:100vh; width:100%">
<div id="chat-history" class="container mx-auto px-3 bg-white text-gray-800 rounded-lg py-8 dark:bg-gray-700 dark:text-white"></div>
    <div class="inputbBox">
  <div class="py-3 w-full justify-center items-center px-5 mx-auto">   
    <label for="search" class="mb-2 text-sm font-medium text-gray-900 sr-only dark:text-white">Search</label>
    <div class="relative">
        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
            <svg aria-hidden="true" class="w-5 h-5 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
        </div>
        <input type="text" id="message-input" class="block w-full p-4 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Enter Essay title" required>
        <button type="submit" class="text-white absolute right-2.5 bottom-2.5 bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" id="send-button">Generate</button>
    </div>
</div>
    </div>
</div>

    
<style>
  
  #chat-history {
    padding: 50px 40px;
    overflow-y: auto;
    text-align:justify;
    vertical-align:top;
    padding-bottom: 100px;
  }
  
  .user-message {
    position:absolute;
    float:left;
    background-color: rgb(247, 247, 247);
    color: black;
    border-radius: 8px;
    padding: 8px;
    margin-bottom: 8px;
  }
  
  .bot-message {
    position:absolute;
    float:right;
    background-color: rgb(9, 209, 149);
    color:white;
    border-radius: 8px;
    padding: 8px;
    margin-bottom: 8px;
    text-align: right;
  }
  
  .inputbBox{
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: center;
      position: fixed;
      bottom: 10px;
      left: 0;
      width: 100%;
  }
  
  .mx-1{
      margin: 0 0px;
  }

  
  
  
  @media screen and (max-width:660px) {
      .inputbBox{
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: center;
      position: fixed;
      bottom: 0;
      left: 0;
      width: 100%;
  }
  .inputSend{
   padding: 10px 0;
   width: 90%;
   background: white;
   border:1px solid rgb(228, 228, 228);
   outline: 1px solid rgb(204, 204, 204);
   text-indent: 10px;
  border-radius: 0;
  }
  
  .inputBtn{
      padding: 11px;
      background-color: rgb(14, 168, 135);
      color:white;
      border: 1px solid rgb(14, 168, 135);
      border-top-right-radius: 5px;
      border-radius: 0;
  }
  }
  </style>    
  
  <script is:inline>
  
  const chatHistory = document.getElementById("chat-history");
  const messageInput = document.getElementById("message-input");
  const sendButton = document.getElementById("send-button");
  const apiKey ='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'
 
async function sendMessage(message) {
  const response = await fetch(`https://api.openai.com/v1/engines/text-davinci-003/completions`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${apiKey}`
    },
    body: JSON.stringify({
      "prompt": `Write IELTS essay on the following text:\n ${message}\n\nEssay:`,
      max_tokens: 2000,
      temperature: 0.5,
      top_p: 1,
     
    })
  });

  const data = await response.json();
  return data.choices[0].text.trim();
}



  
  function displayMessage(message, isBot) {
    const messageElement = document.createElement("div");
    messageElement.classList.add(isBot ? "bot-message" : "user-message");
    messageElement.textContent = isBot ? "Wait..." : message;
    messageElement.style.textAlign="left";
    chatHistory.appendChild(messageElement);
    if (isBot) {
      sendMessage(message).then(botMessage => {
        messageElement.textContent = botMessage;
      });
    }
  }
  
  sendButton.addEventListener("click", async () => {
    const message = messageInput.value.trim();
    if (message === "") return;
  
    displayMessage(message, false);
    const botMessage = await sendMessage(message);
    displayMessage(botMessage, true);
    messageInput.value = "";
    messageInput.focus();
  });

  
  </script>
